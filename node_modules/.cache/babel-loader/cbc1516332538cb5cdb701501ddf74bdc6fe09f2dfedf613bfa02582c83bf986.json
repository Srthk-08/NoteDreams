{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91998\\\\OneDrive\\\\Desktop\\\\React Tutorial\\\\notedreams\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const intialNotes = [];\n  const [notes, setNotes] = useState(intialNotes);\n\n  // Get All Notes\n  const getNotes = async () => {\n    // API CALL\n    // const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n    //     method: \"GET\",\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //         'auth-token': localStorage.getItem('token')\n    //     },\n    // });\n    // const json = await response.json();\n    // setNotes(json);\n\n    // try {\n    //     const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n    //         method: \"GET\",\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //             'auth-token': localStorage.getItem('token')\n    //         }\n    //     });\n\n    //     const json = await response.json();\n    //     if (Array.isArray(json)) {\n    //         setNotes(json);\n    //     } else {\n    //         console.error('Expected an array but got:', json);\n    //         setNotes([]);\n    //     }\n    // } catch (error) {\n    //     console.error('Error fetching notes:', error);\n    //     setNotes([]);\n    // }\n  };\n\n  // Add a Note\n  const addNote = async (title, description, tag) => {\n    // API CALL\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    // Logic to add a note\n    const note = json;\n    setNotes(notes.concat(note));\n  };\n\n  // Delete a Note\n  const deleteNote = async id => {\n    // TODO API CALL\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n\n    // Logic to delete a note\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    // API CALL\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n\n    // Logic to edit in client\n    let newNote = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < newNote.length; index++) {\n      const element = newNote[index];\n      if (element._id === id) {\n        newNote[index].title = title;\n        newNote[index].description = description;\n        newNote[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNote);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"NH3nhiCIAjrR6fBfiFrFaCOCAw8=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","intialNotes","notes","setNotes","getNotes","addNote","title","description","tag","response","fetch","method","headers","localStorage","getItem","body","JSON","stringify","json","note","concat","deleteNote","id","newNotes","filter","_id","editNote","newNote","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91998/OneDrive/Desktop/React Tutorial/notedreams/src/context/notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n\r\n    const intialNotes = []\r\n\r\n    const [notes, setNotes] = useState(intialNotes);\r\n\r\n    // Get All Notes\r\n    const getNotes = async () => {\r\n        // API CALL\r\n        // const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n        //     method: \"GET\",\r\n        //     headers: {\r\n        //         'Content-Type': 'application/json',\r\n        //         'auth-token': localStorage.getItem('token')\r\n        //     },\r\n        // });\r\n        // const json = await response.json();\r\n        // setNotes(json);\r\n\r\n        // try {\r\n        //     const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n        //         method: \"GET\",\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json',\r\n        //             'auth-token': localStorage.getItem('token')\r\n        //         }\r\n        //     });\r\n\r\n        //     const json = await response.json();\r\n        //     if (Array.isArray(json)) {\r\n        //         setNotes(json);\r\n        //     } else {\r\n        //         console.error('Expected an array but got:', json);\r\n        //         setNotes([]);\r\n        //     }\r\n        // } catch (error) {\r\n        //     console.error('Error fetching notes:', error);\r\n        //     setNotes([]);\r\n        // }\r\n\r\n    }\r\n\r\n\r\n    // Add a Note\r\n    const addNote = async (title, description, tag) => {\r\n        // API CALL\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n\r\n        const json = await response.json();\r\n        // Logic to add a note\r\n        const note = json\r\n        setNotes(notes.concat(note));\r\n    }\r\n\r\n\r\n    // Delete a Note\r\n    const deleteNote = async (id) => {\r\n        // TODO API CALL\r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token')\r\n            },\r\n        });\r\n        const json = await response.json();\r\n        setNotes(json);\r\n\r\n        // Logic to delete a note\r\n        const newNotes = notes.filter((note) => { return note._id !== id });\r\n        setNotes(newNotes);\r\n    }\r\n\r\n\r\n    // Edit a Note\r\n    const editNote = async (id, title, description, tag) => {\r\n        // API CALL\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify({ title, description, tag })\r\n        });\r\n\r\n        const json = await response.json();\r\n\r\n\r\n        // Logic to edit in client\r\n        let newNote = JSON.parse(JSON.stringify(notes));\r\n        for (let index = 0; index < newNote.length; index++) {\r\n            const element = newNote[index];\r\n            if (element._id === id) {\r\n                newNote[index].title = title;\r\n                newNote[index].description = description;\r\n                newNote[index].tag = tag;\r\n                break;\r\n            }\r\n        }\r\n        setNotes(newNote);\r\n    }\r\n\r\n    return (\r\n        <NoteContext.Provider value={{ notes, setNotes, addNote, deleteNote, editNote, getNotes }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}